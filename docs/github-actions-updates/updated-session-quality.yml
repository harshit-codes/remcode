name: Session Quality Monitor

on:
  push:
    paths: ['docs/SESSIONS.csv']
  schedule:
    # Weekly quality review every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  quality-check:
    name: Session Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd docs
          npm install --silent
          
      - name: Run comprehensive quality analysis
        run: |
          cd docs
          
          echo "🔍 Running session quality analysis..."
          
          # Validate CSV format and data quality
          npm run validate
          
      - name: Validate JSON Schema
        run: |
          cd docs
          npm run json:validate > quality-report.log 2>&1
          
          # Generate insights for quality metrics
          npm run session-summary >> quality-report.log 2>&1
          
          echo "📊 Quality analysis complete"
          
      - name: Analyze session patterns
        run: |
          cd docs
          
          # Create quality analysis script
          cat > quality-analyzer.js << 'EOF'
          const fs = require('fs');
          const { parseSessionsCSV } = require('./scripts/analyze-progress');
          
          function analyzeQuality() {
            try {
              const sessions = parseSessionsCSV();
              const quality = {
                totalSessions: sessions.length,
                qualityMetrics: {
                  avgDuration: 0,
                  detailLevel: { high: 0, medium: 0, low: 0 },
                  consistency: { good: 0, needsImprovement: 0 },
                  completeness: { complete: 0, incomplete: 0 }
                },
                recommendations: []
              };
              
              sessions.forEach(session => {
                // Duration analysis
                const duration = parseInt(session.duration_mins) || 0;
                quality.qualityMetrics.avgDuration += duration;
                
                // Detail level analysis
                const achievementsLength = session.achievements?.length || 0;
                const learningsLength = session.learnings?.length || 0;
                const notesLength = session.notes?.length || 0;
                
                const totalDetail = achievementsLength + learningsLength + notesLength;
                if (totalDetail > 200) quality.qualityMetrics.detailLevel.high++;
                else if (totalDetail > 100) quality.qualityMetrics.detailLevel.medium++;
                else quality.qualityMetrics.detailLevel.low++;
                
                // Consistency analysis
                const hasProperFormat = session.session_id?.includes('-') && 
                                      session.timestamp?.includes('T') &&
                                      ['completed', 'in_progress', 'blocked'].includes(session.status);
                                      
                if (hasProperFormat) quality.qualityMetrics.consistency.good++;
                else quality.qualityMetrics.consistency.needsImprovement++;
                
                // Completeness analysis  
                const requiredFields = ['focus', 'achievements', 'next_steps'];
                const hasAllFields = requiredFields.every(field => 
                  session[field] && session[field] !== 'None' && session[field].length > 5
                );
                
                if (hasAllFields) quality.qualityMetrics.completeness.complete++;
                else quality.qualityMetrics.completeness.incomplete++;
              });
              
              quality.qualityMetrics.avgDuration = Math.round(quality.qualityMetrics.avgDuration / sessions.length);
              
              // Generate recommendations
              if (quality.qualityMetrics.detailLevel.low > sessions.length * 0.3) {
                quality.recommendations.push("Consider adding more detail to achievements and learnings");
              }
              
              if (quality.qualityMetrics.completeness.incomplete > 0) {
                quality.recommendations.push("Ensure all required fields have meaningful content");
              }
              
              if (quality.qualityMetrics.avgDuration < 30) {
                quality.recommendations.push("Consider longer sessions for more substantial progress");
              }
              
              return quality;
            } catch (error) {
              console.error('Quality analysis failed:', error);
              return null;
            }
          }
          
          const quality = analyzeQuality();
          if (quality) {
            console.log('📊 Session Quality Report');
            console.log('========================');
            console.log(`Total Sessions: ${quality.totalSessions}`);
            console.log(`Average Duration: ${quality.qualityMetrics.avgDuration} minutes`);
            console.log('');
            console.log('Detail Level Distribution:');
            console.log(`  High Detail: ${quality.qualityMetrics.detailLevel.high}`);
            console.log(`  Medium Detail: ${quality.qualityMetrics.detailLevel.medium}`);  
            console.log(`  Low Detail: ${quality.qualityMetrics.detailLevel.low}`);
            console.log('');
            console.log('Consistency:');
            console.log(`  Good Format: ${quality.qualityMetrics.consistency.good}`);
            console.log(`  Needs Improvement: ${quality.qualityMetrics.consistency.needsImprovement}`);
            console.log('');
            console.log('Completeness:');
            console.log(`  Complete Sessions: ${quality.qualityMetrics.completeness.complete}`);
            console.log(`  Incomplete Sessions: ${quality.qualityMetrics.completeness.incomplete}`);
            console.log('');
            if (quality.recommendations.length > 0) {
              console.log('Recommendations:');
              quality.recommendations.forEach((rec, i) => {
                console.log(`  ${i + 1}. ${rec}`);
              });
            } else {
              console.log('✅ No quality issues detected');
            }
            
            // Save quality metrics
            fs.writeFileSync('session-quality.json', JSON.stringify(quality, null, 2));
          }
          EOF
          
          node quality-analyzer.js >> quality-report.log 2>&1
          
      - name: Create quality issue if problems found
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const qualityData = JSON.parse(fs.readFileSync('docs/session-quality.json', 'utf8'));
              
              if (qualityData.recommendations.length > 0) {
                const issueBody = `## 📊 Session Quality Review
                
                **Analysis Date**: ${new Date().toISOString().split('T')[0]}
                
                ### Quality Metrics
                - **Total Sessions**: ${qualityData.totalSessions}
                - **Average Duration**: ${qualityData.qualityMetrics.avgDuration} minutes
                
                ### Detail Level Distribution
                - **High Detail**: ${qualityData.qualityMetrics.detailLevel.high} sessions
                - **Medium Detail**: ${qualityData.qualityMetrics.detailLevel.medium} sessions
                - **Low Detail**: ${qualityData.qualityMetrics.detailLevel.low} sessions
                
                ### Consistency & Completeness
                - **Good Format**: ${qualityData.qualityMetrics.consistency.good} sessions
                - **Complete Sessions**: ${qualityData.qualityMetrics.completeness.complete} sessions
                - **Incomplete Sessions**: ${qualityData.qualityMetrics.completeness.incomplete} sessions
                
                ### 🎯 Recommendations
                ${qualityData.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}
                
                ### Next Steps
                - [ ] Review sessions with low detail levels
                - [ ] Ensure all required fields have meaningful content  
                - [ ] Consider session duration optimization
                - [ ] Apply quality improvements to future sessions
                
                ---
                *This issue was automatically generated by Session Quality Monitor*`;
                
                // Check if similar issue already exists
                const { data: existingIssues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['session-quality', 'automated'],
                  state: 'open'
                });
                
                if (existingIssues.length === 0) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `📊 Session Quality Review - ${new Date().toISOString().split('T')[0]}`,
                    body: issueBody,
                    labels: ['session-quality', 'automated', 'enhancement']
                  });
                  
                  console.log('Created quality review issue');
                } else {
                  console.log('Quality review issue already exists');
                }
              } else {
                console.log('✅ No quality issues detected');
              }
            } catch (error) {
              console.log('Error reading quality data:', error.message);
            }
            
      - name: Upload quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: session-quality-reports
          path: |
            docs/quality-report.log
            docs/session-quality.json
          retention-days: 30
