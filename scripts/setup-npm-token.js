#!/usr/bin/env node

/**
 * NPM Token Setup Script for GitHub Actions
 * 
 * This script helps configure the NPM_TOKEN secret in GitHub repository
 * for automatic package publishing via GitHub Actions.
 */

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîê NPM Token Setup for GitHub Actions\n');

function checkGitHubCLI() {
  try {
    execSync('gh --version', { stdio: 'ignore' });
    return true;
  } catch (error) {
    return false;
  }
}

function getRepositoryInfo() {
  try {
    const remoteUrl = execSync('git remote get-url origin', { encoding: 'utf8' }).trim();
    const match = remoteUrl.match(/github\.com[:/]([^/]+)\/([^/.]+)/);
    if (match) {
      return { owner: match[1], repo: match[2] };
    }
  } catch (error) {
    console.error('‚ùå Could not determine repository information');
  }
  return null;
}

function showInstructions() {
  const repoInfo = getRepositoryInfo();
  
  console.log('üìã **MANUAL SETUP INSTRUCTIONS**\n');
  
  console.log('1Ô∏è‚É£ **Get NPM Token:**');
  console.log('   ‚Ä¢ Go to https://www.npmjs.com/settings/tokens');
  console.log('   ‚Ä¢ Click "Generate New Token" ‚Üí "Classic Token"');
  console.log('   ‚Ä¢ Select "Automation" for CI/CD publishing');
  console.log('   ‚Ä¢ Copy the generated token\n');
  
  console.log('2Ô∏è‚É£ **Add GitHub Secret:**');  if (repoInfo) {
    console.log(`   ‚Ä¢ Go to https://github.com/${repoInfo.owner}/${repoInfo.repo}/settings/secrets/actions`);
  } else {
    console.log('   ‚Ä¢ Go to your GitHub repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions');
  }
  console.log('   ‚Ä¢ Click "New repository secret"');
  console.log('   ‚Ä¢ Name: NPM_TOKEN');
  console.log('   ‚Ä¢ Value: [paste your NPM token]');
  console.log('   ‚Ä¢ Click "Add secret"\n');
  
  console.log('3Ô∏è‚É£ **Test the Pipeline:**');
  console.log('   ‚Ä¢ Make a commit with "feat:" prefix for minor version bump');
  console.log('   ‚Ä¢ Or "fix:" prefix for patch version bump');
  console.log('   ‚Ä¢ Push to main branch to trigger auto-publishing\n');
  
  console.log('üéØ **Example Commit Messages:**');
  console.log('   ‚Ä¢ "feat: add new MCP tool" ‚Üí 0.1.6 ‚Üí 0.2.0');
  console.log('   ‚Ä¢ "fix: resolve API issue" ‚Üí 0.1.6 ‚Üí 0.1.7');
  console.log('   ‚Ä¢ "docs: update README" ‚Üí 0.1.6 ‚Üí 0.1.7\n');
  
  console.log('‚úÖ **Pipeline Status Check:**');
  if (repoInfo) {
    console.log(`   ‚Ä¢ Monitor: https://github.com/${repoInfo.owner}/${repoInfo.repo}/actions`);
  } else {
    console.log('   ‚Ä¢ Check GitHub Actions tab in your repository');
  }
}

function checkNPMLogin() {
  try {
    const whoami = execSync('npm whoami', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ NPM Login: ${whoami}`);
    return whoami;
  } catch (error) {
    console.log('‚ùå NPM Login: Not logged in');
    console.log('   Run: npm login');
    return null;
  }
}

function main() {
  console.log('üîç **Current Status:**');
  
  // Check NPM login
  const npmUser = checkNPMLogin();
  
  // Check GitHub CLI
  const hasGHCLI = checkGitHubCLI();
  console.log(`${hasGHCLI ? '‚úÖ' : '‚ùå'} GitHub CLI: ${hasGHCLI ? 'Available' : 'Not installed'}`);
  
  // Check repository
  const repoInfo = getRepositoryInfo();
  console.log(`${repoInfo ? '‚úÖ' : '‚ùå'} Repository: ${repoInfo ? `${repoInfo.owner}/${repoInfo.repo}` : 'Not detected'}`);
  
  // Check if NPM_TOKEN might be configured
  if (hasGHCLI && repoInfo) {
    try {
      execSync(`gh secret list --repo ${repoInfo.owner}/${repoInfo.repo}`, { stdio: 'ignore' });
      console.log('‚úÖ GitHub Secrets: Access verified');
    } catch (error) {
      console.log('‚ùå GitHub Secrets: Cannot verify (may need authentication)');
    }
  }
  
  console.log('\n' + '='.repeat(60) + '\n');
  
  showInstructions();
  
  if (!npmUser) {
    console.log('‚ö†Ô∏è  **ACTION REQUIRED:** Please run "npm login" first\n');
  }
  
  if (!hasGHCLI) {
    console.log('üí° **OPTIONAL:** Install GitHub CLI for easier secret management:');
    console.log('   ‚Ä¢ macOS: brew install gh');
    console.log('   ‚Ä¢ Windows: winget install GitHub.cli');
    console.log('   ‚Ä¢ Linux: apt install gh (or equivalent)\n');
  }
}

if (require.main === module) {
  main();
}

module.exports = { showInstructions, checkNPMLogin, getRepositoryInfo };
