import { Request, Response } from 'express';
import { getLogger } from '../../utils/logger';
import { StateManager, RemcodeState } from '../../processing/state-manager';
import { WorkflowMonitor } from '../../workflows/monitor';
import { WorkflowGenerator } from '../../workflows/generator';
import { WorkflowType } from '../../workflows/templates';

const logger = getLogger('ProcessingMCPHandler');

export interface ProcessingOptions {
  type: 'full' | 'incremental' | 'vectorize' | 'analyze';
  force: boolean;
  repository?: string;
  owner?: string;
  repo?: string;
  branch?: string;
  token?: string;
}

export class ProcessingMCPHandler {
  private stateManager: StateManager;
  private workflowMonitor: WorkflowMonitor;
  private workflowGenerator: WorkflowGenerator;

  constructor(githubToken?: string) {
    this.stateManager = new StateManager();
    this.workflowMonitor = new WorkflowMonitor(githubToken);
    this.workflowGenerator = new WorkflowGenerator();
  }

  /**
   * Trigger repository reprocessing
   */
  async handleTriggerReprocessing(req: Request, res: Response, params?: any): Promise<void> {
    const options: ProcessingOptions = params || req.body;
    const { type = 'incremental', force = false, owner, repo, branch = 'main' } = options;

    try {
      logger.info(`Triggering ${type} reprocessing (force: ${force})`);
      
      if (!owner || !repo) {
        res.status(400).json({ error: 'Owner and repo are required for processing' });
        return;
      }
      
      // Update processing status - use 'analyzing' as the initial processing state
      await this.stateManager.updateProcessingStatus('analyzing');
      
      // Generate appropriate workflow based on processing type
      let workflowResult;
      
      if (type === 'full') {
        workflowResult = await this.workflowGenerator.generateAdvancedWorkflow(
          `${owner}/${repo}`,
          {
            parameters: {
              forceFullReprocess: force
            }
          }
        );
      } else if (type === 'vectorize') {
        workflowResult = await this.workflowGenerator.generateCustomWorkflow(
          'remcode-vectorize',
          WorkflowType.REMCODE_ADVANCED,
          {
            repoName: `${owner}/${repo}`,
            parameters: {
              skipAnalysis: true,
              forceFullReprocess: force
            }
          }
        );
      } else {
        // Default incremental workflow
        workflowResult = await this.workflowGenerator.generateRemcodeWorkflow(
          `${owner}/${repo}`
        );
      }
      
      if (!workflowResult.success) {
        throw new Error(`Failed to generate workflow: ${workflowResult.error}`);
      }
      
      // Trigger workflow if available
      let runId: number | null = null;
      try {
        runId = await this.workflowMonitor.triggerWorkflow(
          owner, 
          repo, 
          'remcode.yml', // Default workflow name
          branch,
          { force: force.toString() }
        );
      } catch (triggerError) {
        logger.error(`Error triggering workflow: ${triggerError instanceof Error ? triggerError.message : String(triggerError)}`);
      }
      
      res.status(200).json({
        message: `${type} reprocessing triggered`,
        status: 'processing',
        workflowGenerated: workflowResult.success,
        workflowTriggered: !!runId,
        runId: runId
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error(`Reprocessing failed: ${errorMessage}`);
      await this.stateManager.updateProcessingStatus('failed');
      res.status(500).json({ error: errorMessage });
    }
  }

  /**
   * Get current processing status
   */
  async handleGetProcessingStatus(req: Request, res: Response, params?: any): Promise<void> {
    const { owner, repo, runId } = params || req.body || {};
    
    try {
      // Get state from state manager
      const state = await this.stateManager.loadState();
      const baseStatus = {
        status: state?.processing?.status || 'idle',
        lastUpdated: state?.processing?.lastUpdated || null,
        stats: state?.processing?.stats || {}
      };
      
      // If workflow runId, owner and repo are provided, get workflow status
      if (runId && owner && repo) {
        try {
          const workflowStatus = await this.workflowMonitor.getWorkflowStatus(owner, repo, parseInt(runId));
          
          res.status(200).json({
            ...baseStatus,
            workflow: {
              runId,
              status: workflowStatus.status,
              conclusion: workflowStatus.conclusion,
              url: workflowStatus.url,
              details: workflowStatus.jobSummary || {},
              steps: workflowStatus.steps || []
            }
          });
        } catch (workflowError) {
          logger.warn(`Failed to get workflow status: ${workflowError instanceof Error ? workflowError.message : String(workflowError)}`);
          // Continue to return base status
        }
      }
      
      res.status(200).json(baseStatus);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error(`Failed to get processing status: ${errorMessage}`);
      res.status(500).json({ error: 'Failed to get processing status' });
    }
  }
  
  /**
   * Get workflow processing history
   */
  async handleGetProcessingHistory(req: Request, res: Response, params?: any): Promise<void> {
    const { owner, repo, limit = 5 } = params || req.body || {};
    
    if (!owner || !repo) {
      res.status(400).json({ error: 'Owner and repo are required' });
      return;
    }
    
    try {
      // Look for recent workflow runs
      const workflowPattern = /remcode/i; // Match any remcode workflow
      const hasSuccessful = await this.workflowMonitor.hasSuccessfulWorkflow(
        owner, repo, workflowPattern, 604800000 // 7 days
      );
      
      // Get detailed runs for remcode workflows
      const remcodeRuns = await this.workflowMonitor.getWorkflowRunsDetailed(
        owner, repo, 'remcode', typeof limit === 'string' ? parseInt(limit) : limit
      );
      
      res.status(200).json({
        hasSuccessfulRun: hasSuccessful,
        recentRuns: remcodeRuns.map(run => ({
          runId: run.runId,
          status: run.status,
          conclusion: run.conclusion,
          createdAt: run.createdAt,
          url: run.url
        }))
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error(`Failed to get processing history: ${errorMessage}`);
      res.status(500).json({ error: 'Failed to get processing history' });
    }
  }
}
conclusion === 'failure') {
              response.status = 'failed';
            } else if (workflowStatus.status === 'in_progress') {
              response.status = 'analyzing';
            }
          }
        } catch (workflowError) {
          logger.warn('Failed to get workflow status', workflowError);
          // Continue with local state only
        }
      }

      // Check for pending changes if we have repository info
      if (state?.repository?.commit) {
        try {
          // This would require the ProcessingPipeline to be available
          // For now, we'll indicate this feature needs the repository to be available locally
          response.pendingChanges = false; // Placeholder
        } catch (error) {
          logger.debug('Could not check for pending changes', error);
        }
      }

      logger.info('Retrieved processing status', { 
        status: response.status, 
        owner, 
        repo, 
        runId 
      });

      res.json(response);

    } catch (error: any) {
      logger.error('Failed to get processing status', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error),
        status: 'unknown'
      });
    }
  }

  /**
   * Get workflow processing history
   */
  async handleGetProcessingHistory(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, limit = 10 } = params || req.query;
      
      if (!owner || !repo) {
        res.status(400).json({ 
          error: 'Owner and repo are required for processing history',
          received: { owner, repo }
        });
        return;
      }

      logger.info(`Getting processing history for ${owner}/${repo}`, { limit });

      // Get workflow runs from GitHub Actions
      const workflowRuns = await this.workflowMonitor.getWorkflowRunsDetailed(
        owner, 
        repo, 
        'remcode.yml', 
        parseInt(limit as string)
      );

      const history = workflowRuns.map(run => ({
        runId: run.runId,
        status: run.status,
        conclusion: run.conclusion,
        startedAt: run.createdAt,
        completedAt: run.updatedAt,
        duration: run.updatedAt && run.createdAt ? 
          Math.round((new Date(run.updatedAt).getTime() - new Date(run.createdAt).getTime()) / 1000) : 
          null,
        url: run.url,
        message: run.message,
        commit: run.url ? run.url.split('/').pop() : null, // Extract commit from URL if available
        jobSummary: run.jobSummary || {},
        timedOut: run.timedOut || false
      }));

      // Get local state for additional context
      const state = await this.stateManager.loadState();
      
      res.json({
        success: true,
        repository: `${owner}/${repo}`,
        currentState: {
          status: state?.processing?.status || 'idle',
          lastProcessed: state?.processing?.lastUpdate,
          lastCommit: state?.processing?.lastCommit,
          statistics: state?.statistics
        },
        history,
        totalRuns: history.length,
        summary: {
          successful: history.filter(h => h.conclusion === 'success').length,
          failed: history.filter(h => h.conclusion === 'failure').length,
          inProgress: history.filter(h => h.status === 'in_progress').length,
          cancelled: history.filter(h => h.conclusion === 'cancelled').length
        }
      });

    } catch (error: any) {
      logger.error('Failed to get processing history', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Cancel a running workflow
   */
  async handleCancelProcessing(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, runId } = params || req.body;
      
      if (!owner || !repo || !runId) {
        res.status(400).json({ 
          error: 'Owner, repo, and runId are required to cancel processing',
          received: { owner, repo, runId }
        });
        return;
      }

      logger.info(`Cancelling workflow run ${runId} for ${owner}/${repo}`);

      // Cancel the workflow run
      await this.workflowMonitor.githubActions.cancelWorkflowRun(owner, repo, parseInt(runId));

      // Update local state
      await this.stateManager.updateProcessingStatus('idle');

      res.json({
        success: true,
        message: `Processing run ${runId} cancelled successfully`,
        runId: parseInt(runId),
        repository: `${owner}/${repo}`
      });

    } catch (error: any) {
      logger.error('Failed to cancel processing', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Retry a failed workflow
   */
  async handleRetryProcessing(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, runId, onlyFailedJobs = false } = params || req.body;
      
      if (!owner || !repo || !runId) {
        res.status(400).json({ 
          error: 'Owner, repo, and runId are required to retry processing',
          received: { owner, repo, runId }
        });
        return;
      }

      logger.info(`Retrying workflow run ${runId} for ${owner}/${repo}`, { onlyFailedJobs });

      // Retry the workflow run
      await this.workflowMonitor.githubActions.rerunWorkflow(owner, repo, parseInt(runId), onlyFailedJobs);

      // Update local state
      await this.stateManager.updateProcessingStatus('analyzing');

      res.json({
        success: true,
        message: `Processing run ${runId} retry triggered successfully`,
        originalRunId: parseInt(runId),
        retryType: onlyFailedJobs ? 'failed_jobs_only' : 'all_jobs',
        repository: `${owner}/${repo}`,
        statusUrl: `https://github.com/${owner}/${repo}/actions/runs/${runId}`
      });

    } catch (error: any) {
      logger.error('Failed to retry processing', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Get workflow logs
   */
  async handleGetProcessingLogs(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, runId } = params || req.query;
      
      if (!owner || !repo || !runId) {
        res.status(400).json({ 
          error: 'Owner, repo, and runId are required to get processing logs',
          received: { owner, repo, runId }
        });
        return;
      }

      logger.info(`Getting logs for workflow run ${runId} in ${owner}/${repo}`);

      // Get workflow logs
      const logs = await this.workflowMonitor.getWorkflowRunLogs(owner, repo, parseInt(runId));

      if (!logs) {
        res.status(404).json({
          error: 'Logs not found or not yet available',
          runId: parseInt(runId),
          repository: `${owner}/${repo}`,
          note: 'Logs may not be available for in-progress or very recent runs'
        });
        return;
      }

      // Convert buffer to string for JSON response
      const logsContent = logs.toString('utf8');

      res.json({
        success: true,
        runId: parseInt(runId),
        repository: `${owner}/${repo}`,
        logs: logsContent,
        size: logs.length,
        downloadUrl: `https://github.com/${owner}/${repo}/actions/runs/${runId}/logs`
      });

    } catch (error: any) {
      logger.error('Failed to get processing logs', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Get processing metrics and analytics
   */
  async handleGetProcessingMetrics(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, days = 30 } = params || req.query;
      
      if (!owner || !repo) {
        res.status(400).json({ 
          error: 'Owner and repo are required for processing metrics',
          received: { owner, repo }
        });
        return;
      }

      logger.info(`Getting processing metrics for ${owner}/${repo}`, { days });

      // Get workflow runs from the specified time period
      const workflowRuns = await this.workflowMonitor.getWorkflowRunsDetailed(
        owner, 
        repo, 
        'remcode.yml', 
        100 // Get enough runs to cover the time period
      );

      // Filter runs within the time period
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - parseInt(days as string));
      
      const recentRuns = workflowRuns.filter(run => 
        new Date(run.createdAt) >= cutoffDate
      );

      // Calculate metrics
      const metrics = {
        totalRuns: recentRuns.length,
        successful: recentRuns.filter(r => r.conclusion === 'success').length,
        failed: recentRuns.filter(r => r.conclusion === 'failure').length,
        cancelled: recentRuns.filter(r => r.conclusion === 'cancelled').length,
        inProgress: recentRuns.filter(r => r.status === 'in_progress').length,
        successRate: recentRuns.length > 0 ? 
          (recentRuns.filter(r => r.conclusion === 'success').length / recentRuns.length * 100).toFixed(2) + '%' : 
          'N/A',
        averageDuration: recentRuns.length > 0 ? 
          Math.round(recentRuns.reduce((acc, run) => {
            if (run.createdAt && run.updatedAt) {
              return acc + (new Date(run.updatedAt).getTime() - new Date(run.createdAt).getTime());
            }
            return acc;
          }, 0) / recentRuns.length / 1000) + 's' : 
          'N/A',
        lastProcessed: recentRuns.length > 0 ? recentRuns[0].createdAt : null
      };

      // Get current state
      const state = await this.stateManager.loadState();

      res.json({
        success: true,
        repository: `${owner}/${repo}`,
        period: `${days} days`,
        metrics,
        currentState: {
          status: state?.processing?.status || 'idle',
          statistics: state?.statistics
        },
        trends: {
          // Could add trend analysis here in the future
          note: 'Trend analysis available in future updates'
        }
      });

    } catch (error: any) {
      logger.error('Failed to get processing metrics', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }
}
 'unknown'
      });
    }
  }

  /**
   * Get workflow processing history
   */
  async handleGetProcessingHistory(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, limit = 10 } = params || req.query;
      
      if (!owner || !repo) {
        res.status(400).json({ 
          error: 'Owner and repo are required for processing history',
          received: { owner, repo }
        });
        return;
      }

      logger.info(`Getting processing history for ${owner}/${repo}`, { limit });

      // Get workflow runs from GitHub Actions
      const workflowRuns = await this.workflowMonitor.getWorkflowRunsDetailed(
        owner, 
        repo, 
        'remcode.yml', 
        parseInt(limit as string)
      );

      const history = workflowRuns.map(run => ({
        runId: run.runId,
        status: run.status,
        conclusion: run.conclusion,
        startedAt: run.createdAt,
        completedAt: run.updatedAt,
        duration: run.updatedAt && run.createdAt ? 
          Math.round((new Date(run.updatedAt).getTime() - new Date(run.createdAt).getTime()) / 1000) : 
          null,
        url: run.url,
        message: run.message,
        commit: run.url ? run.url.split('/').pop() : null, // Extract commit from URL if available
        jobSummary: run.jobSummary || {},
        timedOut: run.timedOut || false
      }));

      // Get local state for additional context
      const state = await this.stateManager.loadState();
      
      res.json({
        success: true,
        repository: `${owner}/${repo}`,
        currentState: {
          status: state?.processing?.status || 'idle',
          lastProcessed: state?.processing?.lastUpdate,
          lastCommit: state?.processing?.lastCommit,
          statistics: state?.statistics
        },
        history,
        totalRuns: history.length,
        summary: {
          successful: history.filter(h => h.conclusion === 'success').length,
          failed: history.filter(h => h.conclusion === 'failure').length,
          inProgress: history.filter(h => h.status === 'in_progress').length,
          cancelled: history.filter(h => h.conclusion === 'cancelled').length
        }
      });

    } catch (error: any) {
      logger.error('Failed to get processing history', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Cancel a running workflow
   */
  async handleCancelProcessing(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, runId } = params || req.body;
      
      if (!owner || !repo || !runId) {
        res.status(400).json({ 
          error: 'Owner, repo, and runId are required to cancel processing',
          received: { owner, repo, runId }
        });
        return;
      }

      logger.info(`Cancelling workflow run ${runId} for ${owner}/${repo}`);

      // Cancel the workflow run
      await this.workflowMonitor.githubActions.cancelWorkflowRun(owner, repo, parseInt(runId));

      // Update local state
      await this.stateManager.updateProcessingStatus('idle');

      res.json({
        success: true,
        message: `Processing run ${runId} cancelled successfully`,
        runId: parseInt(runId),
        repository: `${owner}/${repo}`
      });

    } catch (error: any) {
      logger.error('Failed to cancel processing', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Retry a failed workflow
   */
  async handleRetryProcessing(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, runId, onlyFailedJobs = false } = params || req.body;
      
      if (!owner || !repo || !runId) {
        res.status(400).json({ 
          error: 'Owner, repo, and runId are required to retry processing',
          received: { owner, repo, runId }
        });
        return;
      }

      logger.info(`Retrying workflow run ${runId} for ${owner}/${repo}`, { onlyFailedJobs });

      // Retry the workflow run
      await this.workflowMonitor.githubActions.rerunWorkflow(owner, repo, parseInt(runId), onlyFailedJobs);

      // Update local state
      await this.stateManager.updateProcessingStatus('analyzing');

      res.json({
        success: true,
        message: `Processing run ${runId} retry triggered successfully`,
        originalRunId: parseInt(runId),
        retryType: onlyFailedJobs ? 'failed_jobs_only' : 'all_jobs',
        repository: `${owner}/${repo}`,
        statusUrl: `https://github.com/${owner}/${repo}/actions/runs/${runId}`
      });

    } catch (error: any) {
      logger.error('Failed to retry processing', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Get workflow logs
   */
  async handleGetProcessingLogs(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, runId } = params || req.query;
      
      if (!owner || !repo || !runId) {
        res.status(400).json({ 
          error: 'Owner, repo, and runId are required to get processing logs',
          received: { owner, repo, runId }
        });
        return;
      }

      logger.info(`Getting logs for workflow run ${runId} in ${owner}/${repo}`);

      // Get workflow logs
      const logs = await this.workflowMonitor.getWorkflowRunLogs(owner, repo, parseInt(runId));

      if (!logs) {
        res.status(404).json({
          error: 'Logs not found or not yet available',
          runId: parseInt(runId),
          repository: `${owner}/${repo}`,
          note: 'Logs may not be available for in-progress or very recent runs'
        });
        return;
      }

      // Convert buffer to string for JSON response
      const logsContent = logs.toString('utf8');

      res.json({
        success: true,
        runId: parseInt(runId),
        repository: `${owner}/${repo}`,
        logs: logsContent,
        size: logs.length,
        downloadUrl: `https://github.com/${owner}/${repo}/actions/runs/${runId}/logs`
      });

    } catch (error: any) {
      logger.error('Failed to get processing logs', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Get processing metrics and analytics
   */
  async handleGetProcessingMetrics(req: Request, res: Response, params?: any): Promise<void> {
    try {
      const { owner, repo, days = 30 } = params || req.query;
      
      if (!owner || !repo) {
        res.status(400).json({ 
          error: 'Owner and repo are required for processing metrics',
          received: { owner, repo }
        });
        return;
      }

      logger.info(`Getting processing metrics for ${owner}/${repo}`, { days });

      // Get workflow runs from the specified time period
      const workflowRuns = await this.workflowMonitor.getWorkflowRunsDetailed(
        owner, 
        repo, 
        'remcode.yml', 
        100 // Get enough runs to cover the time period
      );

      // Filter runs within the time period
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - parseInt(days as string));
      
      const recentRuns = workflowRuns.filter(run => 
        new Date(run.createdAt) >= cutoffDate
      );

      // Calculate metrics
      const metrics = {
        totalRuns: recentRuns.length,
        successful: recentRuns.filter(r => r.conclusion === 'success').length,
        failed: recentRuns.filter(r => r.conclusion === 'failure').length,
        cancelled: recentRuns.filter(r => r.conclusion === 'cancelled').length,
        inProgress: recentRuns.filter(r => r.status === 'in_progress').length,
        successRate: recentRuns.length > 0 ? 
          (recentRuns.filter(r => r.conclusion === 'success').length / recentRuns.length * 100).toFixed(2) + '%' : 
          'N/A',
        averageDuration: recentRuns.length > 0 ? 
          Math.round(recentRuns.reduce((acc, run) => {
            if (run.createdAt && run.updatedAt) {
              return acc + (new Date(run.updatedAt).getTime() - new Date(run.createdAt).getTime());
            }
            return acc;
          }, 0) / recentRuns.length / 1000) + 's' : 
          'N/A',
        lastProcessed: recentRuns.length > 0 ? recentRuns[0].createdAt : null
      };

      // Get current state
      const state = await this.stateManager.loadState();

      res.json({
        success: true,
        repository: `${owner}/${repo}`,
        period: `${days} days`,
        metrics,
        currentState: {
          status: state?.processing?.status || 'idle',
          statistics: state?.statistics
        },
        trends: {
          // Could add trend analysis here in the future
          note: 'Trend analysis available in future updates'
        }
      });

    } catch (error: any) {
      logger.error('Failed to get processing metrics', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }
}
