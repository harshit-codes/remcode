import { PromptType } from './prompts';
// Inline interfaces to avoid circular import
interface Scenario {
  id: string;
  name: string;
  description: string;
  triggers: string[];
  negativePatterns?: string[];
  tools: string[];
  difficulty: any;
  promptType: any;
  estimatedTime?: string;
  requiredSkills?: string[];
  examples?: string[];
  tags?: string[];
}

/**
 * Complete scenario definitions for all 13 software engineering contexts
 */
export const SCENARIO_DEFINITIONS: Scenario[] = [
  {
    id: 'refactoring',
    name: 'Code Refactoring',
    description: 'Improving existing code structure and quality without changing functionality',
    triggers: [
      'refactor', 'clean up', 'improve', 'restructure', 'simplify', 'optimize code', 
      'reduce complexity', 'make more readable', 'technical debt', 'code smell',
      'extract method', 'rename', 'move method', 'split class', 'consolidate'
    ],
    negativePatterns: ['add feature', 'implement new', 'create functionality', 'new requirement'],
    tools: ['search_code', 'find_similar_code', 'get_code_context'],
    difficulty: "intermediate" as any,
    promptType: PromptType.REFACTORING,
    estimatedTime: '1-4 hours',
    requiredSkills: ['design patterns', 'SOLID principles', 'clean code principles'],
    examples: [
      'Extract this method into smaller functions', 
      'Convert this class to use composition instead of inheritance',
      'Reduce the complexity of this function'
    ],
    tags: ['refactoring', 'code quality', 'maintenance']
  },
  {
    id: 'new_feature',
    name: 'New Feature Development',
    description: 'Adding new functionality to the codebase',
    triggers: [
      'add feature', 'implement', 'create', 'develop new', 'build functionality', 
      'new capability', 'enhance with', 'extend to include', 'add support for',
      'integrate', 'introduce', 'enable', 'provide', 'allow users to'
    ],
    negativePatterns: ['fix bug', 'resolve issue', 'troubleshoot', 'broken'],
    tools: ['search_code', 'get_code_context', 'analyze_file_structure'],
    difficulty: "intermediate" as any,
    promptType: PromptType.NEW_FEATURE,
    estimatedTime: '2-8 hours',
    requiredSkills: ['software design', 'testing', 'domain knowledge'],
    examples: [
      'Add a user authentication feature', 
      'Implement export to PDF functionality',
      'Create a new API endpoint'
    ],
    tags: ['feature', 'development', 'enhancement']
  },
  {
    id: 'bug_fixing',
    name: 'Bug Fixing',
    description: 'Identifying and resolving defects in the code',
    triggers: [
      'fix bug', 'resolve issue', 'troubleshoot', 'fix error', 'solve problem', 
      'not working', 'incorrect behavior', 'unexpected result', 'crash', 'fails',
      'debug', 'broken', 'exception', 'error message', 'malfunction'
    ],
    negativePatterns: ['add feature', 'new capability', 'enhancement'],
    tools: ['search_code', 'find_similar_code', 'get_code_context'],
    difficulty: "intermediate" as any,
    promptType: PromptType.BUG_FIXING,
    estimatedTime: '30min-3 hours',
    requiredSkills: ['debugging', 'problem-solving', 'root cause analysis'],
    examples: [
      'Fix the login error when using special characters', 
      'Resolve the calculation issue in the reporting module',
      'Debug why the API returns 500 errors'
    ],
    tags: ['bug', 'fix', 'defect', 'issue']
  },
  {
    id: 'performance',
    name: 'Performance Optimization',
    description: 'Improving system efficiency, speed, and resource utilization',
    triggers: [
      'optimize performance', 'speed up', 'improve efficiency', 'reduce latency', 
      'memory usage', 'cpu usage', 'faster execution', 'slow', 'bottleneck',
      'performance issue', 'timeout', 'scalability', 'resource consumption'
    ],
    negativePatterns: ['add feature', 'new functionality'],
    tools: ['search_code', 'find_similar_code', 'get_code_context'],
    difficulty: "advanced" as any,
    promptType: PromptType.PERFORMANCE,
    estimatedTime: '2-6 hours',
    requiredSkills: ['algorithmic complexity', 'profiling tools', 'performance measurement'],
    examples: [
      'Optimize this database query that\'s running slowly', 
      'Reduce the memory usage of this processing function',
      'Improve the response time of this API endpoint'
    ],
    tags: ['performance', 'optimization', 'speed', 'efficiency']
  },
  {
    id: 'security',
    name: 'Security Analysis & Hardening',
    description: 'Identifying vulnerabilities and implementing robust security measures',
    triggers: [
      'security review', 'security check', 'vulnerability assessment', 'find vulnerabilities', 
      'secure the code', 'penetration testing', 'security audit', 'authentication',
      'authorization', 'encryption', 'xss', 'sql injection', 'csrf', 'security flaw'
    ],
    negativePatterns: ['performance', 'new feature'],
    tools: ['search_code', 'find_similar_code', 'get_code_context'],
    difficulty: "advanced" as any,
    promptType: PromptType.SECURITY,
    estimatedTime: '2-5 hours',
    requiredSkills: ['security principles', 'OWASP knowledge', 'threat modeling'],
    examples: [
      'Review this authentication code for security issues', 
      'Check for SQL injection vulnerabilities',
      'Secure this API endpoint against unauthorized access'
    ],
    tags: ['security', 'vulnerability', 'safety']
  },
  {
    id: 'testing',
    name: 'Test Development & Coverage',
    description: 'Creating comprehensive testing strategies for code reliability',
    triggers: [
      'create tests', 'add unit tests', 'improve test coverage', 'integration tests', 
      'write tests', 'test scenarios', 'test cases', 'testing strategy', 'test plan',
      'mock', 'stub', 'test data', 'test automation', 'quality assurance'
    ],
    negativePatterns: ['production code', 'business logic'],
    tools: ['search_code', 'get_code_context', 'find_similar_code'],
    difficulty: "intermediate" as any,
    promptType: PromptType.TESTING,
    estimatedTime: '1-4 hours',
    requiredSkills: ['testing principles', 'test frameworks', 'mocking'],
    examples: [
      'Add unit tests for this authentication service', 
      'Create integration tests for the API endpoints',
      'Improve test coverage for this module'
    ],
    tags: ['testing', 'quality assurance', 'unit tests', 'integration tests']
  },
  {
    id: 'code_review',
    name: 'Code Review & Quality Assessment',
    description: 'Evaluating code for quality, maintainability, and standards compliance',
    triggers: [
      'review code', 'evaluate', 'assess quality', 'check for issues', 'provide feedback', 
      'analyze code', 'code check', 'pull request', 'merge request', 'code audit',
      'quality gate', 'standards compliance', 'best practices check'
    ],
    negativePatterns: ['implement', 'create new'],
    tools: ['search_code', 'find_similar_code', 'get_code_context'],
    difficulty: "intermediate" as any,
    promptType: PromptType.CODE_REVIEW,
    estimatedTime: '1-2 hours',
    requiredSkills: ['code quality standards', 'security awareness', 'performance optimization'],
    examples: [
      'Review this pull request for best practices', 
      'Check this code for security vulnerabilities',
      'Assess the quality of this implementation'
    ],
    tags: ['review', 'quality', 'assessment']
  },
  {
    id: 'architecture',
    name: 'System Architecture & Design',
    description: 'Designing scalable, maintainable system structures and component interactions',
    triggers: [
      'architecture', 'system design', 'design pattern', 'structure', 'component design',
      'microservices', 'monolith', 'scalability', 'modularity', 'separation of concerns',
      'layered architecture', 'design principles', 'architectural decision'
    ],
    negativePatterns: ['bug fix', 'small change'],
    tools: ['analyze_file_structure', 'search_code', 'get_code_context'],
    difficulty: "advanced" as any,
    promptType: PromptType.ARCHITECTURE,
    estimatedTime: '4-12 hours',
    requiredSkills: ['architectural patterns', 'system design', 'scalability principles'],
    examples: [
      'Design a microservices architecture for this monolith', 
      'Create a scalable data processing pipeline',
      'Design the component structure for this new module'
    ],
    tags: ['architecture', 'design', 'scalability', 'structure']
  },
  {
    id: 'documentation',
    name: 'Technical Documentation',
    description: 'Creating clear, comprehensive documentation for developers and users',
    triggers: [
      'document', 'create docs', 'add documentation', 'write readme', 'explain code', 
      'api docs', 'update documentation', 'user guide', 'developer guide', 'tutorial',
      'how to', 'getting started', 'installation guide', 'troubleshooting'
    ],
    negativePatterns: ['implement', 'code', 'bug fix'],
    tools: ['search_code', 'get_code_context', 'analyze_file_structure'],
    difficulty: "beginner" as any,
    promptType: PromptType.DOCUMENTATION,
    estimatedTime: '1-3 hours',
    requiredSkills: ['technical writing', 'markdown', 'clarity of expression'],
    examples: [
      'Create API documentation for these endpoints', 
      'Write a README for this project',
      'Document the installation and setup process'
    ],
    tags: ['documentation', 'readme', 'api-docs']
  },
  {
    id: 'deployment',
    name: 'Deployment & DevOps',
    description: 'Implementing reliable, automated deployment processes and infrastructure',
    triggers: [
      'deploy', 'deployment', 'devops', 'ci/cd', 'pipeline', 'infrastructure', 
      'docker', 'kubernetes', 'cloud', 'aws', 'azure', 'gcp', 'terraform',
      'ansible', 'jenkins', 'github actions', 'build process', 'release'
    ],
    negativePatterns: ['code logic', 'business rules'],
    tools: ['search_code', 'get_repository_status', 'analyze_file_structure'],
    difficulty: "advanced" as any,
    promptType: PromptType.DEPLOYMENT,
    estimatedTime: '2-8 hours',
    requiredSkills: ['DevOps tools', 'infrastructure as code', 'deployment strategies'],
    examples: [
      'Set up CI/CD pipeline for this project', 
      'Create Docker configuration for deployment',
      'Implement blue-green deployment strategy'
    ],
    tags: ['deployment', 'devops', 'infrastructure', 'automation']
  },
  {
    id: 'maintenance',
    name: 'Code Maintenance & Updates',
    description: 'Keeping codebase healthy, updated, and aligned with current standards',
    triggers: [
      'maintenance', 'update dependencies', 'upgrade', 'legacy code', 'modernize', 
      'deprecate', 'remove dead code', 'cleanup', 'technical debt', 'housekeeping',
      'version update', 'library update', 'framework migration', 'consolidate'
    ],
    negativePatterns: ['new feature', 'enhancement'],
    tools: ['search_code', 'find_similar_code', 'get_repository_status'],
    difficulty: "intermediate" as any,
    promptType: PromptType.MAINTENANCE,
    estimatedTime: '1-6 hours',
    requiredSkills: ['dependency management', 'migration strategies', 'risk assessment'],
    examples: [
      'Update all dependencies to latest stable versions', 
      'Remove unused code and clean up the codebase',
      'Migrate from deprecated API to new version'
    ],
    tags: ['maintenance', 'updates', 'cleanup', 'migration']
  },
  {
    id: 'learning',
    name: 'Learning & Code Exploration',
    description: 'Understanding codebases, technologies, and patterns for educational purposes',
    triggers: [
      'understand', 'explain', 'how does', 'what is', 'learn about', 'explore', 
      'analyze', 'study', 'investigate', 'research', 'discover', 'find out',
      'help me understand', 'walk through', 'trace', 'follow the flow'
    ],
    negativePatterns: ['implement', 'create', 'fix', 'deploy'],
    tools: ['search_code', 'get_code_context', 'find_similar_code', 'analyze_file_structure'],
    difficulty: "beginner" as any,
    promptType: PromptType.LEARNING,
    estimatedTime: '30min-2 hours',
    requiredSkills: ['analytical thinking', 'pattern recognition', 'documentation reading'],
    examples: [
      'Help me understand how authentication works in this app', 
      'Explain the data flow in this module',
      'Show me examples of error handling patterns used here'
    ],
    tags: ['learning', 'exploration', 'understanding', 'education']
  },
  {
    id: 'default',
    name: 'General Software Engineering',
    description: 'General software engineering guidance and best practices',
    triggers: ['help', 'assist', 'general', 'advice', 'guidance', 'best practice'],
    tools: ['search_code', 'get_code_context'],
    difficulty: "intermediate" as any,
    promptType: PromptType.DEFAULT,
    estimatedTime: 'Variable',
    requiredSkills: ['general programming', 'problem solving'],
    examples: ['General coding assistance', 'Best practices guidance'],
    tags: ['general', 'guidance', 'best practices']
  }
];
