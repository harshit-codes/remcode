name: Release Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - 'CONTRIBUTING.md'
      - 'INSTALLATION.md'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        type: choice
        options: [auto, patch, minor, major]
        default: 'auto'
      skip_tests:
        description: 'Skip tests'
        type: boolean
        default: false

jobs:
  test:
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint
        run: npm run lint
        
      - name: Build
        run: npm run build
        
      - name: Run tests
        run: npm run test:unit && npm run test:mcp && npm run test:production

  release:
    needs: [test]
    if: github.event.inputs.skip_tests == 'true' || success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
      
      - name: Version bump
        id: version_bump
        run: |
          # Determine release type
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          if [ "$RELEASE_TYPE" = "auto" ]; then
            # Check commit messages for conventional commits
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$COMMIT_MSG" == feat* ]]; then
              RELEASE_TYPE="minor"
            elif [[ "$COMMIT_MSG" == fix* ]]; then
              RELEASE_TYPE="patch"
            elif [[ "$COMMIT_MSG" == BREAKING* ]] || [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]]; then
              RELEASE_TYPE="major"
            else
              RELEASE_TYPE="patch"
            fi
          fi
          
          echo "Using release type: $RELEASE_TYPE"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Bump version
          npm version $RELEASE_TYPE -m "Release %s"
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "skip_publish=false" >> $GITHUB_OUTPUT
          
          # Push changes back
          git push origin main
          
      - name: Publish to NPM
        if: steps.version_bump.outputs.skip_publish == 'false'
        run: |
          echo "Publishing version ${{ steps.version_bump.outputs.new_version }} to NPM"
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create release tag
        if: steps.version_bump.outputs.skip_publish == 'false'
        run: |
          git tag "v${{ steps.version_bump.outputs.new_version }}"
          git push origin "v${{ steps.version_bump.outputs.new_version }}"