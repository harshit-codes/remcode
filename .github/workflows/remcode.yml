# Remcode workflow version: 0.3.0
# Generated: 2025-05-23T10:00:00.000Z
name: Remcode Processing

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_full_reprocess:
        description: 'Force full reprocessing'
        type: boolean
        default: false
      processing_type:
        description: 'Processing type'
        type: choice
        options:
          - auto
          - full
          - incremental
        default: auto

env:
  NODE_VERSION: '18'
  TIMEOUT_SECONDS: 3600

jobs:
  process:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Validate environment
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"

    - name: Install dependencies
      run: |
        npm ci --legacy-peer-deps
        npm run build

    - name: Validate API keys
      run: |
        if [ -z "$PINECONE_API_KEY" ]; then
          echo "‚ùå PINECONE_API_KEY is not set"
          exit 1
        fi
        if [ -z "$HUGGINGFACE_TOKEN" ]; then
          echo "‚ùå HUGGINGFACE_TOKEN is not set"
          exit 1
        fi
        echo "‚úÖ All required API keys are configured"
      env:
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}

    - name: Determine processing type
      id: processing_type
      run: |
        if [ "${{ github.event.inputs.force_full_reprocess }}" = "true" ]; then
          echo "type=full" >> $GITHUB_OUTPUT
          echo "üîÑ Force full reprocessing requested"
        elif [ "${{ github.event.inputs.processing_type }}" != "" ]; then
          echo "type=${{ github.event.inputs.processing_type }}" >> $GITHUB_OUTPUT
          echo "üéØ Processing type: ${{ github.event.inputs.processing_type }}"
        else
          echo "type=auto" >> $GITHUB_OUTPUT
          echo "ü§ñ Auto-detecting processing type"
        fi

    - name: Process with Remcode
      id: process
      run: |
        echo "üöÄ Starting Remcode processing..."
        
        # Run processing with appropriate options
        if [ "${{ steps.processing_type.outputs.type }}" = "full" ]; then
          npx remcode process --type full --verbose --timeout ${{ env.TIMEOUT_SECONDS }}
        else
          npx remcode process --type ${{ steps.processing_type.outputs.type }} --verbose --timeout ${{ env.TIMEOUT_SECONDS }}
        fi
        
        echo "‚úÖ Processing completed successfully"
      env:
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PINECONE_ENVIRONMENT: ${{ vars.PINECONE_ENVIRONMENT || 'gcp-starter' }}
        PINECONE_INDEX_NAME: ${{ vars.PINECONE_INDEX_NAME }}
        PINECONE_NAMESPACE: ${{ vars.PINECONE_NAMESPACE || 'main' }}
        EMBEDDING_MODEL: ${{ vars.EMBEDDING_MODEL || 'microsoft/graphcodebert-base' }}
        BATCH_SIZE: ${{ vars.BATCH_SIZE || '10' }}
        INCLUDE_TESTS: ${{ vars.INCLUDE_TESTS || 'true' }}

    - name: Upload processing report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: processing-report-${{ github.sha }}
        path: |
          processing-report.json
          processing-error-report.json
        retention-days: 30

    - name: Process status summary
      if: always()
      run: |
        if [ -f "processing-report.json" ]; then
          echo "üìä Processing Report Summary:"
          cat processing-report.json | jq -r '
            "‚úÖ Status: " + (.success | if . then "Success" else "Failed" end) + "\n" +
            "üìÅ Total Files: " + (.results.totalFiles | tostring) + "\n" +
            "‚ûï Added Files: " + (.results.addedFiles | tostring) + "\n" +
            "‚úèÔ∏è Modified Files: " + (.results.modifiedFiles | tostring) + "\n" +
            "üóëÔ∏è Deleted Files: " + (.results.deletedFiles | tostring) + "\n" +
            "üß© Total Chunks: " + (.results.totalChunks | tostring) + "\n" +
            "üî¢ Total Embeddings: " + (.results.totalEmbeddings | tostring) + "\n" +
            "‚è±Ô∏è Duration: " + (.metadata.duration | tostring) + "s"
          '
        elif [ -f "processing-error-report.json" ]; then
          echo "‚ùå Processing Error Report:"
          cat processing-error-report.json | jq -r '.error.message'
        else
          echo "‚ö†Ô∏è No processing report found"
        fi

    - name: Comment on PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## ü§ñ Remcode Processing Results\n\n';
          
          if (fs.existsSync('processing-report.json')) {
            const report = JSON.parse(fs.readFileSync('processing-report.json', 'utf8'));
            comment += `‚úÖ **Status**: ${report.success ? 'Success' : 'Failed'}\n`;
            comment += `üìÅ **Total Files**: ${report.results.totalFiles}\n`;
            comment += `‚ûï **Added Files**: ${report.results.addedFiles}\n`;
            comment += `‚úèÔ∏è **Modified Files**: ${report.results.modifiedFiles}\n`;
            comment += `üóëÔ∏è **Deleted Files**: ${report.results.deletedFiles}\n`;
            comment += `üß© **Total Chunks**: ${report.results.totalChunks}\n`;
            comment += `üî¢ **Total Embeddings**: ${report.results.totalEmbeddings}\n`;
            comment += `‚è±Ô∏è **Duration**: ${report.metadata.duration}s\n`;
          } else if (fs.existsSync('processing-error-report.json')) {
            const errorReport = JSON.parse(fs.readFileSync('processing-error-report.json', 'utf8'));
            comment += `‚ùå **Status**: Failed\n`;
            comment += `**Error**: ${errorReport.error.message}\n`;
          } else {
            comment += '‚ö†Ô∏è No processing report available\n';
          }
          
          comment += '\n---\n*Automated by Remcode*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
